// js/wallet.js
console.log("‚úÖ wallet.js –∑–∞–≥—Ä—É–∂–µ–Ω");

// -----------------------------
// 1) –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
// -----------------------------
let provider = null;
let signer = null;
let selectedAccount = null;

// –ê–î–†–ï–°–ê –ö–û–ù–¢–†–ê–ö–¢–û–í
const IBITI_TOKEN_ADDRESS      = "0xa83825e09d3bf6ABf64efc70F08AdDF81A7Ba196";
const NFTSALEMANAGER_ADDRESS   = "0x5572F3AE84319Fbd6e285a0CB854f92Afd31dd6D";
const NFT_DISCOUNT_ADDRESS     = "0x26C4E3D3E40943D2d569e832A243e329E14ecb02";
const PHASED_TOKENSALE_ADDRESS = "0x3092cFDfF6890F33b3227c3d2740F84772A465c7";

// ABI
import { ibitiTokenAbi }      from "./abis/ibitiTokenAbi.js";
import { nftSaleManagerAbi }  from "./abis/nftSaleManagerAbi.js";
import { nftDiscountAbi }     from "./abis/nftDiscountAbi.js";
import { PhasedTokenSaleAbi } from "./abis/PhasedTokenSaleAbi.js";
import { ethers }             from "https://cdn.jsdelivr.net/npm/ethers@6.13.5/+esm";

// -----------------------------
// 2) –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω–∂–µ–∫—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä (MetaMask/Trust Wallet)
// -----------------------------
async function connectWallet() {
  try {
    // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å injected-–ø—Ä–æ–≤–∞–π–¥–µ—Ä (MetaMask –∏–ª–∏ Trust Wallet)
    if (!window.ethereum) {
      alert("Injected-–ø—Ä–æ–≤–∞–π–¥–µ—Ä (MetaMask/TrustWallet) –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –≤ MetaMask –∏–ª–∏ –≤ Trust Wallet –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      return;
    }

    // 2) –ë–µ—Ä—ë–º —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    const accounts = await window.ethereum.request({ method: "eth_accounts" });
    let account;
    if (accounts.length === 0) {
      // –ï—Å–ª–∏ –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –∑–∞–ø—Ä–æ—Å–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      const requested = await window.ethereum.request({ method: "eth_requestAccounts" });
      account = requested[0];
    } else {
      account = accounts[0];
    }
    selectedAccount = account;
    window.selectedAccount = selectedAccount;

    // 3) –í—ã–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å –≤ UI
    const walletDisplay = document.getElementById("walletAddress");
    if (walletDisplay) walletDisplay.innerText = selectedAccount;

    // 4) –°–æ–∑–¥–∞—ë–º Ethers.js-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ–≤–µ—Ä—Ö window.ethereum
    const web3Provider = new ethers.BrowserProvider(window.ethereum);
    signer = await web3Provider.getSigner();
    provider = web3Provider;

    // 5) –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–µ—Ç—å –Ω–∞ BSC (chainId = 0x38), –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    try {
      await window.ethereum.request({
        method: "wallet_switchEthereumChain",
        params: [{ chainId: "0x38" }] // 0x38 = 56 (BSC)
      });
    } catch (switchError) {
      if (switchError.code === 4902) {
        // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
        try {
          await window.ethereum.request({
            method: "wallet_addEthereumChain",
            params: [{
              chainId: "0x38",
              chainName: "Binance Smart Chain",
              nativeCurrency: { name: "BNB", symbol: "BNB", decimals: 18 },
              rpcUrls: ["https://bsc-dataseed.binance.org/"],
              blockExplorerUrls: ["https://bscscan.com"]
            }]
          });
        } catch (addError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏ BSC:", addError);
        }
      } else {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–µ—Ç—å:", switchError);
      }
    }

    console.log("‚úÖ –ò–Ω–∂–µ–∫—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ–¥–∫–ª—é—á—ë–Ω:", selectedAccount);

    // 6) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
    await initContracts();
    await showIbitiBalance(true);

    // 7) –°–ª—É—à–∞–µ–º —Å–º–µ–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞
    window.ethereum.on("accountsChanged", async (newAccounts) => {
      if (!newAccounts.length) {
        disconnectWallet();
        return;
      }
      selectedAccount = newAccounts[0];
      window.selectedAccount = selectedAccount;
      const wEl = document.getElementById("walletAddress");
      if (wEl) wEl.innerText = selectedAccount;
      await showIbitiBalance(true);
    });

    // 8) –°–ª—É—à–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
    window.ethereum.on("disconnect", () => {
      disconnectWallet();
    });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ injected-–ø—Ä–æ–≤–∞–π–¥–µ—Ä:", err);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ—à–µ–ª—å–∫—É.");
  }
}

// -----------------------------
// 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
// -----------------------------
async function initContracts() {
  window.ibitiToken  = new ethers.Contract(IBITI_TOKEN_ADDRESS,      ibitiTokenAbi,      signer);
  window.saleManager = new ethers.Contract(NFTSALEMANAGER_ADDRESS,   nftSaleManagerAbi,  signer);
  window.nftDiscount = new ethers.Contract(NFT_DISCOUNT_ADDRESS,     nftDiscountAbi,     signer);
  window.phasedSale  = new ethers.Contract(PHASED_TOKENSALE_ADDRESS, PhasedTokenSaleAbi, signer);

  console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
}

// -----------------------------
// 4) –ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞
// -----------------------------
async function showIbitiBalance(highlight = false) {
  if (!window.ibitiToken || !selectedAccount) return;
  try {
    const balance = await window.ibitiToken.balanceOf(selectedAccount);
    const formatted = ethers.formatUnits(balance, 8);
    const el = document.getElementById("ibitiBalance");
    if (el) {
      el.innerText = `–í–∞—à –±–∞–ª–∞–Ω—Å IBITI: ${formatted}`;
      if (highlight) {
        el.style.transition = "background 0.3s ease";
        el.style.background = "rgba(255, 215, 0, 0.2)";
        setTimeout(() => (el.style.background = "transparent"), 500);
      }
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", err);
  }
}

// -----------------------------
// 5) –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
// -----------------------------
async function disconnectWallet() {
  // –£ MetaMask/Trust Wallet –æ–±—ã—á–Ω–æ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ disconnect(),
  // –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
  if (provider?.provider?.disconnect) {
    await provider.provider.disconnect();
  }
  provider = null;
  signer = null;
  selectedAccount = null;

  const walletDisplay = document.getElementById("walletAddress");
  if (walletDisplay) walletDisplay.innerText = "Disconnected";

  const el = document.getElementById("ibitiBalance");
  if (el) el.innerText = "";

  console.log("üîå –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω");
}

// -----------------------------
// 6) –í–µ—à–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É connectWalletBtn
// -----------------------------
document.addEventListener("DOMContentLoaded", () => {
  const connectBtn = document.getElementById("connectWalletBtn");
  if (connectBtn) {
    connectBtn.addEventListener("click", (e) => {
      e.preventDefault();
      connectWallet();
    });
  } else {
    console.warn("–ö–Ω–æ–ø–∫–∞ —Å id='connectWalletBtn' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM.");
  }
});

// -----------------------------
// 7) –≠–∫—Å–ø–æ—Ä—Ç
// -----------------------------
export {
  connectWallet,
  disconnectWallet,
  provider,
  signer,
  showIbitiBalance,
  selectedAccount
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
window.connectWallet     = connectWallet;
window.disconnectWallet  = disconnectWallet;
window.showIbitiBalance  = showIbitiBalance;
window.selectedAccount   = selectedAccount;
