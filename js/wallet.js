// js/wallet.js
console.log("‚úÖ wallet.js –∑–∞–≥—Ä—É–∂–µ–Ω");

import { ethers } from "https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.esm.min.js";
import Web3Modal from "https://unpkg.com/web3modal@1.9.8/dist/index.js";
import WalletConnectProviderConstructor from "https://unpkg.com/@walletconnect/web3-provider@1.6.6/dist/umd/index.min.js";

// ABI
import { ibitiTokenAbi }         from "./abis/ibitiTokenAbi.js";
import { nftSaleManagerAbi }     from "./abis/nftSaleManagerAbi.js";
import { nftDiscountAbi }        from "./abis/nftDiscountAbi.js";
import { phasedTokenSaleAbi }    from "./abis/phasedTokenSaleAbi.js";
import erc20Abi                  from "./abis/erc20Abi.js";

// -----------------------------
// 1) –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
// -----------------------------
let provider   = null;
let signer     = null;
let selectedAccount = null;

const INFURA_ID                  = "1faccf0f1fdc4532ad7a1a38a67ee906";

// –í–∞—à–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è)
const IBITI_TOKEN_ADDRESS        = "0xa83825e09d3bf6ABf64efc70F08AdDF81A7Ba196";
const NFTSALEMANAGER_ADDRESS     = "0x5572F3AE84319Fbd6e285a0CB854f92Afd31dd6D";
const NFT_DISCOUNT_ADDRESS       = "0x26C4E3D3E40943D2d569e832A243e329E14ecb02";
const PHASED_TOKENSALE_ADDRESS   = "0xB2DB398dC13FFb1E07306f96aE359dE5f265eFF1";
const USDT_TOKEN_ADDRESS         = "0x55d398326f99059fF775485246999027B3197955";

// -----------------------------
// 2) Web3Modal –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
// -----------------------------
const providerOptions = {
  walletconnect: {
    package: WalletConnectProviderConstructor,
    options: { infuraId: INFURA_ID }
  }
};

const web3Modal = new Web3Modal({
  cacheProvider: false,
  providerOptions
});

// -----------------------------
// 3) –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∏ —Å–µ—Ç—å BSC
// -----------------------------
async function connectWallet() {
  try {
    if (window.ethereum) {
      try {
        await window.ethereum.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId: "0x38" }]    // BSC Mainnet
        });
      } catch (switchError) {
        if (switchError.code === 4902) {
          await window.ethereum.request({
            method: "wallet_addEthereumChain",
            params: [{
              chainId: "0x38",
              chainName: "Binance Smart Chain",
              nativeCurrency: { name: "BNB", symbol: "BNB", decimals: 18 },
              rpcUrls: ["https://bsc-dataseed.binance.org/"],
              blockExplorerUrls: ["https://bscscan.com"]
            }]
          });
        } else {
          console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–∏:", switchError);
          return;
        }
      }
    }

    console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...");
    provider = await web3Modal.connect();
    const web3Provider = new ethers.providers.Web3Provider(provider);
    signer = web3Provider.getSigner();

    const accounts = await web3Provider.listAccounts();
    if (!accounts.length) return console.warn("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤");

    selectedAccount = accounts[0];
    document.getElementById("walletAddress").innerText = selectedAccount;

    provider.on("accountsChanged", async (accs) => {
      if (!accs.length) return disconnectWallet();
      selectedAccount = accs[0];
      document.getElementById("walletAddress").innerText = selectedAccount;
      await showIbitiBalance(true);
    });

    provider.on("disconnect", () => disconnectWallet());

    console.log("‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:", selectedAccount);

    await initContracts(web3Provider);
    await showIbitiBalance(true);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err);
    alert("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞");
  }
}

// -----------------------------
// 4) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
// -----------------------------
async function initContracts(web3Provider) {
  const signer = web3Provider.getSigner();

  window.ibitiToken = new ethers.Contract(
    IBITI_TOKEN_ADDRESS,
    ibitiTokenAbi,
    signer
  );
  window.saleManager = new ethers.Contract(
    NFTSALEMANAGER_ADDRESS,
    nftSaleManagerAbi,
    signer
  );
  window.nftDiscount = new ethers.Contract(
    NFT_DISCOUNT_ADDRESS,
    nftDiscountAbi,
    signer
  );

  // PhasedTokenSale ‚Äî –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–æ–¥–∞–∂–∏
  window.saleContract = new ethers.Contract(
    PHASED_TOKENSALE_ADDRESS,
    phasedTokenSaleAbi,
    signer
  );
  console.log("üîπ PhasedTokenSale:", window.saleContract.address);

  // USDT –¥–ª—è –æ–ø–ª–∞—Ç—ã
  window.USDTToken = new ethers.Contract(
    USDT_TOKEN_ADDRESS,
    erc20Abi,
    signer
  );
  console.log("üîπ USDTToken:", window.USDTToken.address);

  console.log("‚úÖ –í—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
}

// -----------------------------
// 5) –ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞ IBITI
// -----------------------------
async function showIbitiBalance(highlight = false) {
  if (!window.ibitiToken || !selectedAccount) return;
  try {
    const balance = await window.ibitiToken.balanceOf(selectedAccount);
    const formatted = ethers.utils.formatUnits(balance, 8);
    const el = document.getElementById("ibitiBalance");
    el.innerText = `–í–∞—à –±–∞–ª–∞–Ω—Å IBITI: ${formatted}`;
    if (highlight) {
      el.style.transition = "background 0.3s";
      el.style.background = "rgba(255,215,0,0.2)";
      setTimeout(() => el.style.background = "transparent", 500);
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", err);
  }
}

// -----------------------------
// 6) –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
// -----------------------------
async function disconnectWallet() {
  if (provider?.close) await provider.close();
  provider = null;
  signer = null;
  selectedAccount = null;

  document.getElementById("walletAddress").innerText = "Wallet disconnected";
  document.getElementById("ibitiBalance").innerText = "";
  console.log("üîå –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω");
}

// -----------------------------
// 7) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
// -----------------------------
document.addEventListener("DOMContentLoaded", () => {
  const connectBtn = document.getElementById("connectWalletBtn");
  if (connectBtn) {
    connectBtn.addEventListener("click", (e) => {
      e.preventDefault();
      connectWallet();
    });
  }
});

// -----------------------------
// 8) –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
// -----------------------------
export { connectWallet, disconnectWallet, provider };
