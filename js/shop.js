// js/shop.js
import { ethers } from "https://cdn.jsdelivr.net/npm/ethers@6.13.5/+esm";
import config from "./config.js";
import { buyIBITI, getSaleContract } from "./sale.js";
import {
  connectWallet,
  selectedAccount,
  showIbitiBalance,
  signer           // ‚Üê –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å USDT
} from "./wallet.js";
import Swal from "https://cdn.jsdelivr.net/npm/sweetalert2@11/+esm";
import { PhasedTokenSaleAbi } from "./abis/PhasedTokenSaleAbi.js";
import { ibitiTokenAbi } from "./abis/ibitiTokenAbi.js";

/* ---------- 1. –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ç–æ–ª—å–∫–æ-–¥–ª—è-—á—Ç–µ–Ω–∏—è ---------- */
const rpcProvider     = new ethers.JsonRpcProvider(config.active.rpcUrl);
const readSaleContract = new ethers.Contract(
  config.active.contracts.PHASED_TOKENSALE,
  PhasedTokenSaleAbi,
  rpcProvider
);
const ibitiTokenRead = new ethers.Contract(
  config.active.contracts.IBITI_TOKEN,
  ibitiTokenAbi,
  rpcProvider
);

/* ---------- 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ ---------- */
async function loadSaleStats() {
  // –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç #cap, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –Ω–µ shop-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Üí —Ç–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º
  const capEl = document.getElementById("cap");
  if (!capEl) return;

  const refReserveEl = document.getElementById("refReserve");
  const salePoolEl   = document.getElementById("salePool");
  const soldEl       = document.getElementById("sold");
  const leftEl       = document.getElementById("left");
  const bonusPoolEl  = document.getElementById("bonusPool");
  const progressEl   = document.getElementById("salesProgress");
  const percentEl    = document.getElementById("soldPercent");
  const lastUpdEl    = document.getElementById("lastUpdated");

  const saleContract = getSaleContract() || readSaleContract;
  if (!saleContract) return;

  try {
    /* 1) –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ */
    const saleAddr  = config.active.contracts.PHASED_TOKENSALE;
    const depositBN = await ibitiTokenRead.balanceOf(saleAddr).catch(() => 0n);
    const cap       = Number(ethers.formatUnits(depositBN, 8));

    /* 2) –ø—Ä–æ–¥–∞–Ω–æ –ø–æ —Ñ–∞–∑–∞–º */
    let soldBN = 0n;
    for (let i = 0; i < 3; i++) {
      const p = await saleContract.phases(i);
      soldBN += BigInt(p.sold);
    }
    const sold = Number(ethers.formatUnits(soldBN, 8));

    /* 3) —Ä–µ–∑–µ—Ä–≤—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
// —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
const refReserveBN  = await saleContract.rewardTokens();
const refReserveNum = Number(ethers.formatUnits(refReserveBN, 8));

// –ø—É–ª 10-–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
let bonusReserve = 0;
try {
  const bonusBN = await saleContract.volReserve();
  bonusReserve  = Number(ethers.formatUnits(bonusBN, 8));
} catch (e) {
  console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å volReserve:", e);
}

/* 4) –ø—É–ª, –æ—Å—Ç–∞—Ç–æ–∫, –ø—Ä–æ—Ü–µ–Ω—Ç */
const salePool = cap - refReserveNum - bonusReserve;
const left     = salePool - sold;
const pct      = salePool > 0 ? (sold / salePool) * 100 : 0;
const fmt      = n => n.toLocaleString("ru-RU",
                  { minimumFractionDigits: 2, maximumFractionDigits: 2 });

/* 5) –≤—ã–≤–æ–¥ –≤ DOM */
capEl.textContent        = fmt(cap);
refReserveEl.textContent = fmt(refReserveNum);
salePoolEl.textContent   = fmt(salePool);
soldEl.textContent       = fmt(sold);
leftEl.textContent       = fmt(left);
bonusPoolEl.textContent  = fmt(bonusReserve);

progressEl.style.width = `${Math.min(Math.max(pct, 0), 100)}%`;
percentEl.textContent  = `${pct.toFixed(2)}%`;
lastUpdEl.textContent  = `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString("ru-RU")}`;
} catch (e) {
    console.warn("–û—à–∏–±–∫–∞ loadReferralStats:", e);
  }
}

async function loadReferralStats(account) {
  const refCountEl = document.getElementById("refCount");   // –¥—Ä—É–∑—å—è
  const bonusEl    = document.getElementById("refReward");  // –æ–±—ä—ë–º-–±–æ–Ω—É—Å—ã
  const block      = document.getElementById("referralStats");
  if (!refCountEl || !bonusEl || !block) return;

  const sale = getSaleContract();
  if (!sale) return;

  try {
    // 1) —Å–∫–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π (1 IBI = 1 –¥—Ä—É–≥)
    const refTokBN = await sale.referralRewards(account);
    const friends  = Number(ethers.formatUnits(refTokBN, 8));
    refCountEl.textContent = friends.toString();

    // 2) —Å—É–º–º–∏—Ä—É–µ–º –æ–±—ä—ë–º-–±–æ–Ω—É—Å—ã –∏–∑ Bought(account) ‚Äî —á–∞–Ω–∫–∞–º–∏
    const latest = await rpcProvider.getBlockNumber();
    const DEPLOY = Number(config.active?.saleDeployBlock ?? 0);

    let evts = [];
    if (DEPLOY > 0) {
      const STEP = 100_000; // 50‚Äì200k –Ω–æ—Ä–º
      for (let from = DEPLOY; from <= latest; from += STEP) {
        const to = Math.min(from + STEP - 1, latest);
        const chunk = await readSaleContract.queryFilter(
          readSaleContract.filters.Bought(account),
          from,
          to
        );
        if (chunk?.length) evts.push(...chunk);
      }
    } else {
      const LOOKBACK = 250_000;
      const from = Math.max(0, latest - LOOKBACK);
      evts = await readSaleContract.queryFilter(
        readSaleContract.filters.Bought(account),
        from,
        latest
      );
    }

    const volBN = evts.reduce((sum, ev) => {
      const add = ev?.args?.bonusIBITI ?? 0n;
      return sum + BigInt(add);
    }, 0n);

    bonusEl.textContent = Number(ethers.formatUnits(volBN, 8)).toFixed(2);
    block.style.display = "block";
  } catch (e) {
    console.warn("–û—à–∏–±–∫–∞ loadSaleStats:", e);
  }
}

/* –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∞–∫–∫ –≤–∏–¥–µ—Ç—å –ø–∞–Ω–µ–ª—å-—Ä–µ—Ñ–µ—Ä–∞–ª–∫—É */
async function loadReferralData() {
  if (!selectedAccount) return;
  await loadReferralStats(selectedAccount);
}

/* ---------- 4. UI-—É—Ç–∏–ª–∏—Ç—ã ---------- */
function showDappBrowserNotice() {
  Swal.fire({
    icon: "info",
    title: "–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –∫–æ—à–µ–ª—å–∫–µ",
    html: `–î–ª—è –ø–æ–∫—É–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:<br>
          <strong>MetaMask</strong>, <strong>Trust Wallet</strong> –∏–ª–∏
          <strong>Coinbase Wallet</strong>.`,
    confirmButtonText: "–ü–æ–Ω—è—Ç–Ω–æ",
    allowOutsideClick: false
  });
}

/* ---------- 5. –ú–æ–¥–∞–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏ ---------- */
let currentProduct = null;

window.openPurchaseModal = async product => {
  currentProduct = product;

  if (!selectedAccount) {
    try { await connectWallet(); }
    catch (err) { return console.warn("connectWallet:", err); }
  }

  if (product === "NFT") {
    window.location.href = "nft.html";
    return;
  }

  document.getElementById("purchaseTitle").textContent = "–ü–æ–∫—É–ø–∫–∞ " + product;
  document.getElementById("purchaseModal").style.display = "block";
};

window.closePurchaseModal = () => {
  document.getElementById("purchaseModal").style.display = "none";
  document.getElementById("nftAmount").value = "";
};

/* ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç–∞—Ä—Ç–∞ ---------- */
const SALE_START_TS   = Date.parse("2025-07-01T09:00:00Z"); // 09:00 UTC
const SALE_START_TEXT = "–°—Ç–∞—Ä—Ç 1 –∏—é–ª—è –≤ 09:00 UTC (12:00 –ö–∏–µ–≤)";

const IS_LOCAL = config.active.networkName === "Localhost";

/* ---------- 6. –ü–æ–∫—É–ø–∫–∞ ---------- */
async function handlePurchase(amount, product) {
  /* 0) –ü—Ä–æ–¥–∞–∂–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å ‚Äî —Å–æ–æ–±—â–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º (—Ç–æ–ª—å–∫–æ –≤–Ω–µ –ª–æ–∫–∞–ª–∫–∏) */
  if (!IS_LOCAL && Date.now() < SALE_START_TS) {
    return Swal.fire({
      icon:  "info",
      title: "üìÖ –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å",
      text:  SALE_START_TEXT,
      confirmButtonText: "–û–∫"
    });
  }

  /* 6.1 MetaMask */
  if (!window.ethereum) {
    return Swal.fire({
      icon: "warning",
      title: "MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω",
      text:  "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏."
    });
  }

  /* 6.2 –õ–æ–∞–¥–µ—Ä */
  Swal.fire({
    title: "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è‚Ä¶",
    didOpen: () => Swal.showLoading(),
    allowOutsideClick: false
  });

  try {
    const amountUnits  = ethers.parseUnits(amount.toString(), 8);
    const paymentToken = document.getElementById("paymentToken")?.value;

    if (product !== "IBITIcoin" || paymentToken !== "USDT") {
      throw new Error("–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ BNB –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.");
    }

    /* –±–∞–ª–∞–Ω—Å USDT ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ */
    const usdt    = new ethers.Contract(config.active.contracts.USDT_TOKEN, ibitiTokenAbi, signer);
    const balance = await usdt.balanceOf(selectedAccount);
    if (balance < amountUnits) throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT.");

    /* –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è */
    const ref = localStorage.getItem("referrer") || ethers.ZeroAddress;
    const tx  = await buyIBITI(amountUnits, ref);
    await tx.wait();

    await showIbitiBalance(true);

    /* ‚â•10 IBITI ‚Üí –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É */
    if (+amount >= 10) {
  localStorage.setItem(`referralUnlocked_${selectedAccount}`, "1");
  await loadReferralStats(selectedAccount);

  const link = `${location.origin}${location.pathname}?ref=${selectedAccount}`;
  await Swal.fire({
    icon: "info",
    title: "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
    html:  `<a href="${link}" target="_blank">${link}</a><br>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å.`,
    confirmButtonText: "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
    preConfirm: () => navigator.clipboard.writeText(link)
  });

  window.enableReferralAfterPurchase?.(selectedAccount);
}

// –í—ã–Ω–µ—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø–æ—Å–ª–µ –æ–∫–Ω–∞ "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!" —Å—é–¥–∞!
await Swal.fire({
  icon: "success",
  title: "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!",
  timer: 3000,
  showConfirmButton: false
});

setTimeout(() => loadReferralStats(selectedAccount), 1500);

  /* ---------- –¢–í–û–ô –∂–µ–ª–∞–µ–º—ã–π catch-–±–ª–æ–∫ ---------- */
  } catch (error) {
    console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:", error);

    let rawReason = error?.revert?.args?.[0]
      || error?.shortMessage
      || error?.message
      || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";

    if (typeof rawReason === "string" && rawReason.startsWith("Error:")) {
      rawReason = rawReason.replace(/^Error:\s*/, "");
    }

    const reason = rawReason === "not started"
      ? "üìÖ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞—á–Ω—ë—Ç—Å—è: 1 –∏—é–ª—è –≤ 09:00 UTC"
      : rawReason;

    Swal.fire({
      icon: "error",
      title: "–û—à–∏–±–∫–∞",
      text:  reason,
      confirmButtonText: "–û–∫"
    });
  }
}

window.handlePurchase = handlePurchase;

/* ---------- 7. DOMContentLoaded ---------- */
document.addEventListener("DOMContentLoaded", () => {
  /* 7.1 —Å–æ—Ö—Ä–∞–Ω—è–µ–º ?ref=‚Ä¶ */
  const ref = new URLSearchParams(location.search).get("ref");
  if (ref && ethers.isAddress(ref)) localStorage.setItem("referrer", ref);

  /* 7.2 –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ */
  loadSaleStats();
  loadReferralData();

  // —Ç–∞–π–º–µ—Ä –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö, –≥–¥–µ –µ—Å—Ç—å #cap
  if (document.getElementById("cap")) {
    setInterval(loadSaleStats, 30_000);
  }
  document.getElementById("refreshStats")?.addEventListener("click", loadSaleStats);

  /* 7.3 —Ñ–æ—Ä–º–∞ –ø–æ–∫—É–ø–∫–∏ */
  document.getElementById("purchaseForm")?.addEventListener("submit", async ev => {
    ev.preventDefault();
    if (!selectedAccount) {
      return Swal.fire({ icon: "warning", title: "–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", text: "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫." });
    }
    const amount = document.getElementById("nftAmount").value;
    window.closePurchaseModal();
    await handlePurchase(amount, currentProduct);
    loadSaleStats();
  });

  /* 7.4 –≤–∫–ª—é—á–∞–µ–º / –≤—ã–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å¬ª –≤ –º–æ–¥–∞–ª–∫–µ */
  const paymentSel = document.getElementById("paymentToken");
  const confirmBtn = document.getElementById("confirmBtn");
  paymentSel?.addEventListener("change", () => {
    if (confirmBtn) confirmBtn.disabled = !paymentSel.value;
  });

  /* 7.5 —Ç–∞–π–º–µ—Ä –¥–æ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂ */
  const countdownEl = document.getElementById("countdownNotice");
  if (countdownEl) {
    const saleStart = new Date("2025-07-01T09:00:00Z").getTime();
    const int = setInterval(() => {
      const diff = saleStart - Date.now();
      if (diff <= 0) {
        countdownEl.textContent = "üü¢ –ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–Ω–∞!";
        return clearInterval(int);
      }
      const d = Math.floor(diff / 864e5);
      const h = Math.floor((diff / 36e5) % 24);
      const m = Math.floor((diff / 6e4) % 60);
      const s = Math.floor((diff / 1e3) % 60);
      countdownEl.textContent = `‚è≥ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑: ${d}–¥ ${h}—á ${m}–º ${s}—Å`;
    }, 1000);
  }

  /* 7.6 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª–∫—É */
  const walletModal = document.getElementById("walletModal");
  const openBtn     = document.getElementById("openWalletModal");
  const closeBtn    = document.getElementById("closeWalletModal");
  const btnInj      = document.getElementById("btnInjected");
  const btnCb       = document.getElementById("btnCoinbase");

  openBtn?.addEventListener("click", e => {
    const isMobile = /Android|iPhone|iPad|iPod/i.test(navigator.userAgent);
    if (isMobile && !window.ethereum) {
      e.preventDefault();
      return showDappBrowserNotice();
    }
    walletModal.style.display = "flex";
  });
  closeBtn?.addEventListener("click", () => (walletModal.style.display = "none"));
  walletModal?.addEventListener("click", e => {
    if (e.target === walletModal) walletModal.style.display = "none";
  });

  btnInj?.addEventListener("click", async () => {
    walletModal.style.display = "none";
    await window.connectWallet?.();
    loadReferralData();
  });
  btnCb?.addEventListener("click", async () => {
    walletModal.style.display = "none";
    await window.connectViaCoinbase?.();
    loadReferralData();
  });

  /* 7.7 –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ—Ñ-—Å—Å—ã–ª–∫–∏ */
  const storedOwner = localStorage.getItem("referralOwner");
  if (storedOwner && selectedAccount && selectedAccount !== storedOwner) {
    localStorage.removeItem("referralOwner");
  }
});

console.log("‚úÖ shop.js –∑–∞–≥—Ä—É–∂–µ–Ω");








