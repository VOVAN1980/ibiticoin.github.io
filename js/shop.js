// js/shop.js
// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∫—É–ø–∫–∞–º–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ

import config               from "./config.js";
import { buyIBITI }         from "./sale.js";
import { connectWallet, selectedAccount, showIbitiBalance } from "./wallet.js";
import Swal                  from "https://cdn.jsdelivr.net/npm/sweetalert2@11/+esm";
import { saleContract } from "./sale.js";

console.log("‚úÖ shop.js –∑–∞–≥—Ä—É–∂–µ–Ω");

async function loadReferralStats(account) {
  const rewardEl    = document.getElementById("refReward");
  const refCountEl  = document.getElementById("refCount");
  const statsBlock  = document.getElementById("referralStats");

  if (!saleContract || !account || !rewardEl || !refCountEl || !statsBlock) return;

  try {
    const raw = await saleContract.referralRewards(account);
    const reward = Number(ethers.formatUnits(raw, 8));
    const count = Math.floor(reward); // –µ—Å–ª–∏ 1 IBITI = 1 –¥—Ä—É–≥

    rewardEl.innerText = reward.toFixed(2);
    refCountEl.innerText = count;
    statsBlock.style.display = "block";
  } catch (err) {
    console.warn("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:", err);
  }
}

let currentProduct = null;

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 * –µ—Å–ª–∏ —Å–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç –Ω–µ –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –∫–æ—à–µ–ª—å–∫–∞.
 */
export function showDappBrowserNotice() {
  Swal.fire({
    icon:    "info",
    title:   "–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –∫–æ—à–µ–ª—å–∫–µ",
    html:    `
      –î–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ<br>
      –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:<br>
      <strong>MetaMask</strong>, <strong>Trust Wallet</strong><br>
      –∏–ª–∏ <strong>Coinbase Wallet</strong>.
    `,
    confirmButtonText: "–ü–æ–Ω—è—Ç–Ω–æ",
    allowOutsideClick: false
  });
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É –ø–æ–∫—É–ø–∫–∏.
 * –ï—Å–ª–∏ –∫–æ—à–µ–ª—ë–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç.
 */
window.openPurchaseModal = async function(productName) {
  currentProduct = productName;

  // 1) –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ—à–µ–ª—ë–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (!selectedAccount) {
    try {
      await connectWallet();
    } catch (err) {
      console.warn("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:", err);
      return;
    }
  }

  // 2) –ü–µ—Ä–µ—Ö–æ–¥ –≤ NFT-–≥–∞–ª–µ—Ä–µ—é
  if (productName === "NFT") {
    window.location.href = "nft.html";
    return;
  }

  // 3) –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∫–∏ –ø–æ–∫—É–ø–∫–∏
  document.getElementById("purchaseTitle").innerText = "–ü–æ–∫—É–ø–∫–∞ " + productName;
  document.getElementById("purchaseModal").style.display = "block";
};

/** –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–∫—É–ø–∫–∏ */
window.closePurchaseModal = function() {
  document.getElementById("purchaseModal").style.display = "none";
  document.getElementById("nftAmount").value          = "";
};

/**
 * –î–µ–ª–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏ IBITI.
 * @param {string|number} amount ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
 * @param {string}       productName ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
 */
async function handlePurchase(amount, productName) {
  if (!window.ethereum) {
    Swal.fire({
      icon:  "warning",
      title: "MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω",
      text:  "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏."
    });
    return;
  }

  Swal.fire({
    title:              "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...",
    html:               "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∫–æ—à–µ–ª—å–∫–µ",
    allowOutsideClick:  false,
    didOpen:            () => Swal.showLoading()
  });

  try {
    const decimals        = 8;
    const amountFormatted = ethers.parseUnits(amount.toString(), decimals);
    const paymentMethod   = document.getElementById("paymentToken")?.value;
    let   tx;

    if (productName === "IBITIcoin") {
      if (paymentMethod === "USDT") {
        const referrer = localStorage.getItem("referrer") || ethers.ZeroAddress;
        tx = await buyIBITI(amountFormatted, referrer);
      } else {
        throw new Error("–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ BNB –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.");
      }
    } else {
      throw new Error("–ü–æ–∫—É–ø–∫–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.");
    }

    await tx.wait();
    await showIbitiBalance(true);

    Swal.fire({
      icon:    "success",
      title:   "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!",
      text:    "–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ IBITI!",
      timer:   3000,
      showConfirmButton: false
    });

    // –ü–æ–∫—É–ø–∫–∞ ‚â• 10 ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
if (Number(amount) >= 10) {
  const yourAddr = selectedAccount;
  const refLink  = `${window.location.origin}${window.location.pathname}?ref=${yourAddr}`;

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å —Å—Å—ã–ª–∫–æ–π
  Swal.fire({
    icon:    "info",
    title:   "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
    html:    `<a href="${refLink}" target="_blank">${refLink}</a><br>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å.`,
    confirmButtonText: "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
    preConfirm: () => navigator.clipboard.writeText(refLink)
  });

  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª–µ –∏ –∫–Ω–æ–ø–∫—É
  if (typeof window.enableReferralAfterPurchase === "function") {
    window.enableReferralAfterPurchase(yourAddr);
  }

   await loadReferralStats(yourAddr); // üëà –≤–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞
   localStorage.setItem("referralOwner", yourAddr);
}

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:", error);
    let rawReason = error?.revert?.args?.[0] || error?.shortMessage || error?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
    let reason    = rawReason === "not started"
                    ? "üìÖ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞—á–Ω—ë—Ç—Å—è: 1 –∏—é–ª—è –≤ 09:00 UTC"
                    : rawReason;

    Swal.fire({
      icon:    "error",
      title:   "–û—à–∏–±–∫–∞",
      text:    reason,
      confirmButtonText: "–û–∫"
    });
  }
}

window.handlePurchase = handlePurchase;

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
document.addEventListener("DOMContentLoaded", () => {
  // 1) –§–æ—Ä–º–∞ –ø–æ–∫—É–ø–∫–∏
  const form = document.getElementById("purchaseForm");
  if (form) {
    form.addEventListener("submit", async event => {
      event.preventDefault();
      const amount = document.getElementById("nftAmount").value;

      if (!selectedAccount) {
        Swal.fire({
          icon:  "warning",
          title: "–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
          text:  "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫."
        });
        return;
      }

      closePurchaseModal();
      await handlePurchase(amount, currentProduct);
    });
  }

  // 2) –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–∫–µ–Ω–∞
  const paymentToken = document.getElementById("paymentToken");
  const confirmBtn   = document.getElementById("confirmBtn");
  if (paymentToken && confirmBtn) {
    paymentToken.addEventListener("change", () => {
      confirmBtn.disabled = (paymentToken.value === "");
    });
  }

  // 3) –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂
  const countdownEl = document.getElementById("countdownNotice");
  const saleStart   = new Date("2025-07-01T09:00:00Z");
  if (countdownEl) {
    const timer = setInterval(() => {
      const now  = Date.now();
      const diff = saleStart - now;
      if (diff <= 0) {
        countdownEl.innerText = "üü¢ –ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–Ω–∞!";
        clearInterval(timer);
        return;
      }
      const days  = Math.floor(diff / (1000 * 60 * 60 * 24));
      const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
      const mins  = Math.floor((diff / (1000 * 60)) % 60);
      const secs  = Math.floor((diff / 1000) % 60);
      countdownEl.innerText = `‚è≥ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑: ${days}–¥ ${hours}—á ${mins}–º ${secs}—Å`;
    }, 1000);
  }

  // 4) –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª—ë–∫¬ª
  const connectBtn     = document.getElementById("openWalletModal");
  const walletModal    = document.getElementById("walletModal");
  const closeModalBtn  = document.getElementById("closeWalletModal");
  const btnInjected    = document.getElementById("btnInjected");
  const btnCoinbase    = document.getElementById("btnCoinbase");

  if (connectBtn) {
    connectBtn.addEventListener("click", e => {
      const isMobile    = /Android|iPhone|iPad|iPod/i.test(navigator.userAgent);
      const hasInjected = Boolean(window.ethereum);
      if (isMobile && !hasInjected) {
        e.preventDefault();
        showDappBrowserNotice();
        return;
      }
      if (walletModal) walletModal.style.display = "flex";
    });
  }

  if (closeModalBtn && walletModal) {
    closeModalBtn.addEventListener("click", () => {
      walletModal.style.display = "none";
    });
    walletModal.addEventListener("click", (e) => {
      if (e.target === walletModal) walletModal.style.display = "none";
    });
  }

  if (btnInjected) {
    btnInjected.addEventListener("click", () => {
      walletModal.style.display = "none";
      window.connectWallet?.();
    });
  }

  if (btnCoinbase) {
    btnCoinbase.addEventListener("click", () => {
      walletModal.style.display = "none";
      window.connectViaCoinbase?.();
    });
  }

  // 5) –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const storedReferral = localStorage.getItem("referralOwner");
  if (storedReferral && typeof window.enableReferralAfterPurchase === "function") {
    window.enableReferralAfterPurchase(storedReferral);
    loadReferralStats(storedReferral);
  }
});
