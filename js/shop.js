// js/shop.js
import config                                    from "./config.js";
import { buyIBITI }                              from "./sale.js";
import { connectWallet, selectedAccount, showIbitiBalance } from "./wallet.js";
import Swal                                      from "https://cdn.jsdelivr.net/npm/sweetalert2@11/+esm";
import { getSaleContract }                       from "./sale.js";
import { PhasedTokenSaleAbi }                    from "./abis/PhasedTokenSaleAbi.js";
   
// 1) –°–æ–∑–¥–∞—ë–º JsonRpcProvider –∏ —á–∏—Ç–∞—é—â–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
const rpcProvider = new ethers.JsonRpcProvider("https://bsc-dataseed.binance.org/");
const readSaleContract = new ethers.Contract(
  config.mainnet.contracts.PHASED_TOKENSALE_ADDRESS_MAINNET,
  PhasedTokenSaleAbi,
  rpcProvider
);

/**
 * –ü–æ–¥–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂ –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (—á–µ—Ä–µ–∑ signer –∏–ª–∏, –µ—Å–ª–∏ –Ω–µ—Ç, —á–µ—Ä–µ–∑ public RPC).
 */
async function loadSaleStats() {
  const capEl        = document.getElementById("cap");
  const soldEl       = document.getElementById("sold");
  const leftEl       = document.getElementById("left");
  const refReserveEl = document.getElementById("refReserve");
  const refLeftEl    = document.getElementById("refLeft");

  // 2) –ë–µ—Ä—ë–º —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π, –∏–Ω–∞—á–µ ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π
  let saleContract = getSaleContract();
  if (!saleContract) saleContract = readSaleContract;
  if (!saleContract) return;

  try {
    const PHASE_COUNT = 3;
    let capBN  = ethers.Zero;
    let soldBN = ethers.Zero;

    for (let i = 0; i < PHASE_COUNT; i++) {
      const p = await saleContract.phases(i);
      capBN  = capBN + p.cap;
      soldBN = soldBN + p.sold;
    }

    const cap    = Number(ethers.formatUnits(capBN, 8));
    const sold   = Number(ethers.formatUnits(soldBN, 8));
    const left   = cap - sold;

    const reserveBN = await saleContract.rewardTokens();
    const reserve   = Number(ethers.formatUnits(reserveBN, 8));

    capEl.innerText        = cap.toFixed(2);
    soldEl.innerText       = sold.toFixed(2);
    leftEl.innerText       = left.toFixed(2);
    refReserveEl.innerText = reserve.toFixed(2);
    refLeftEl.innerText    = reserve.toFixed(2);
  } catch (err) {
    console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω—Å–µ–π–ª–∞:", err);
  }
}

console.log("‚úÖ shop.js –∑–∞–≥—Ä—É–∂–µ–Ω");

async function loadReferralStats(account) {
  const rewardEl   = document.getElementById("refReward");
  const refCountEl = document.getElementById("refCount");
  const statsBlock = document.getElementById("referralStats");

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const saleContract = getSaleContract();
  if (!saleContract || !account || !rewardEl || !refCountEl || !statsBlock) return;

  try {
    const raw    = await saleContract.referralRewards(account);
    const reward = Number(ethers.formatUnits(raw, 8));
    const count  = Math.floor(reward); // 1 IBITI = 1 –¥—Ä—É–≥

    rewardEl.innerText   = reward.toFixed(2);
    refCountEl.innerText = count;
    statsBlock.style.display = "block";
  } catch (err) {
    console.warn("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:", err);
  }
}

let currentProduct = null;

// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –∫–æ—à–µ–ª—å–∫–∞
export function showDappBrowserNotice() {
  Swal.fire({
    icon:    "info",
    title:   "–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –∫–æ—à–µ–ª—å–∫–µ",
    html:    `
      –î–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ<br>
      –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:<br>
      <strong>MetaMask</strong>, <strong>Trust Wallet</strong><br>
      –∏–ª–∏ <strong>Coinbase Wallet</strong>.
    `,
    confirmButtonText: "–ü–æ–Ω—è—Ç–Ω–æ",
    allowOutsideClick: false
  });
}

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ–∫—É–ø–∫–∏
window.openPurchaseModal = async function(productName) {
  currentProduct = productName;
  if (!selectedAccount) {
    try { await connectWallet(); }
    catch (err) { console.warn("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:", err); return; }
  }
  if (productName === "NFT") {
    window.location.href = "nft.html";
    return;
  }
  document.getElementById("purchaseTitle").innerText   = "–ü–æ–∫—É–ø–∫–∞ " + productName;
  document.getElementById("purchaseModal").style.display = "block";
};

// –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
window.closePurchaseModal = function() {
  document.getElementById("purchaseModal").style.display = "none";
  document.getElementById("nftAmount").value            = "";
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
async function handlePurchase(amount, productName) {
  if (!window.ethereum) {
    return Swal.fire({
      icon:  "warning",
      title: "MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω",
      text:  "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏."
    });
  }

  Swal.fire({
    title:             "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...",
    html:              "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∫–æ—à–µ–ª—å–∫–µ",
    allowOutsideClick: false,
    didOpen:           () => Swal.showLoading()
  });

  try {
    const decimals        = 8;
    const amountFormatted = ethers.parseUnits(amount.toString(), decimals);
    const paymentMethod   = document.getElementById("paymentToken")?.value;
    let tx;

    if (productName === "IBITIcoin") {
      if (paymentMethod === "USDT") {
        const referrer = localStorage.getItem("referrer") || ethers.ZeroAddress;
        tx = await buyIBITI(amountFormatted, referrer);
      } else {
        throw new Error("–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ BNB –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.");
      }
    } else {
      throw new Error("–ü–æ–∫—É–ø–∫–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.");
    }

    await tx.wait();
    await showIbitiBalance(true);

    Swal.fire({
      icon:               "success",
      title:              "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!",
      text:               "–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ IBITI!",
      timer:              3000,
      showConfirmButton:  false
    });

    // –ï—Å–ª–∏ –∫—É–ø–∏–ª–∏ ‚â•10, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–∫—É
    if (Number(amount) >= 10) {
      const yourAddr = selectedAccount;
      const refLink  = `${window.location.origin}${window.location.pathname}?ref=${yourAddr}`;

      await Swal.fire({
        icon:    "info",
        title:   "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
        html:    `<a href="${refLink}" target="_blank">${refLink}</a><br>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å.`,
        confirmButtonText: "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
        preConfirm: () => navigator.clipboard.writeText(refLink)
      });

      if (typeof window.enableReferralAfterPurchase === "function") {
        window.enableReferralAfterPurchase(yourAddr);
      }

      await loadReferralStats(yourAddr);
      localStorage.setItem("referralOwner", yourAddr);
    }

  } catch (error) {
    console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:", error);
    const rawReason = error?.revert?.args?.[0] || error?.shortMessage || error?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
    const reason = rawReason === "not started"
                 ? "üìÖ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞—á–Ω—ë—Ç—Å—è: 1 –∏—é–ª—è –≤ 09:00 UTC (12:00 –ö–∏–µ–≤)"
                 : rawReason;

    Swal.fire({
      icon:             "error",
      title:            "–û—à–∏–±–∫–∞",
      text:             reason,
      confirmButtonText:"–û–∫"
    });
  }
}
window.handlePurchase = handlePurchase;

document.addEventListener("DOMContentLoaded", () => {
  // 0) –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ‚Äî –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  loadSaleStats();

  // 1) –ù–∞–≤–µ—à–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ–∫—É–ø–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –µ—ë —Å–∞–±–º–∏—Ç—É
  document.addEventListener("DOMContentLoaded", () => {
  loadSaleStats();

  const form = document.getElementById("purchaseForm");
  if (form) {
    form.addEventListener("submit", async e => {
      e.preventDefault();
      // ‚Ä¶–≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏‚Ä¶
      await handlePurchase(amount, currentProduct);
      loadSaleStats();
    });
  }
      closePurchaseModal();
      await handlePurchase(amount, currentProduct);

      // 2) –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Äî —Å–Ω–æ–≤–∞ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      loadSaleStats();
    });
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–∫–µ–Ω–∞
  const paymentToken = document.getElementById("paymentToken");
  const confirmBtn   = document.getElementById("confirmBtn");
  if (paymentToken && confirmBtn) {
    paymentToken.addEventListener("change", () => {
      confirmBtn.disabled = (paymentToken.value === "");
    });
  }

  // –û—Ç—Å—á—ë—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂
  const countdownEl = document.getElementById("countdownNotice");
  const saleStart = new Date("2025-07-01T09:00:00Z");
  if (countdownEl) {
    const timer = setInterval(() => {
      const diff = saleStart - Date.now();
      if (diff <= 0) {
        countdownEl.innerText = "üü¢ –ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–Ω–∞!";
        clearInterval(timer);
        return;
      }
      const days  = Math.floor(diff / (1000*60*60*24));
      const hours = Math.floor((diff / (1000*60*60)) % 24);
      const mins  = Math.floor((diff / (1000*60)) % 60);
      const secs  = Math.floor((diff / 1000) % 60);
      countdownEl.innerText = `‚è≥ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑: ${days}–¥ ${hours}—á ${mins}–º ${secs}—Å`;
    }, 1000);
  }

  // –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª—ë–∫
  const connectBtn  = document.getElementById("openWalletModal");
  const walletModal = document.getElementById("walletModal");
  const closeModal  = document.getElementById("closeWalletModal");
  const btnInj      = document.getElementById("btnInjected");
  const btnCb       = document.getElementById("btnCoinbase");

  if (connectBtn) {
    connectBtn.addEventListener("click", e => {
      const isMobile    = /Android|iPhone|iPad|iPod/i.test(navigator.userAgent);
      const hasInjected = Boolean(window.ethereum);
      if (isMobile && !hasInjected) {
        e.preventDefault();
        showDappBrowserNotice();
        return;
      }
      walletModal.style.display = "flex";
    });
  }
  if (closeModal) {
    closeModal.addEventListener("click", () => walletModal.style.display = "none");
    walletModal.addEventListener("click", e => {
      if (e.target === walletModal) walletModal.style.display = "none";
    });
  }
  if (btnInj)    btnInj.addEventListener("click", () => { walletModal.style.display = "none"; window.connectWallet(); });
  if (btnCb)     btnCb.addEventListener("click",  () => { walletModal.style.display = "none"; window.connectViaCoinbase(); });

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–∫—É
  const stored = localStorage.getItem("referralOwner");
  if (stored && typeof window.enableReferralAfterPurchase === "function") {
    window.enableReferralAfterPurchase(stored);
    loadReferralStats(stored);
  }
});

